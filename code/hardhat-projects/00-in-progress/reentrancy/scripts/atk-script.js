
const hre = require("hardhat");

async function main() {

  let Token, Atk, hardhatToken, hardhatAttacker, tokenOwner, attackOwner, addr1, addr2, addrs;
  let initSupply = 10000;

  Token = await ethers.getContractFactory("EIP20");
  Atk = await ethers.getContractFactory("AtkContract");

  [tokenOwner, attackOwner, addr1, addr2, ...addrs] = await hre.ethers.getSigners();

  hardhatToken = await Token.deploy();
  hardhatAttacker = await Atk.deploy();

  await hardhatToken.mint(tokenOwner.address, initSupply);
  await hardhatToken.transfer(hardhatAttacker.address, 300);

  let wei = 10000;
  await network.provider.send("hardhat_setBalance", [
    hardhatToken.address,
    "0x" + wei.toString(16),
  ]);

  let maxIter = 3;
  let amount = 250;

  await hardhatAttacker.setMaxIter(maxIter);
  await hardhatAttacker.setTargetAndAmount(hardhatToken.address, amount);
  await hardhatAttacker.resetAndRun();
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
