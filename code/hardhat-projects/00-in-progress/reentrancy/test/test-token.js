// We import Chai to use its asserting functions here.
const { expect } = require("chai");

describe("Token contract", function () {
  let Token, hardhatToken, owner, addr1, addr2, addrs;
  let initSupply = 10000;

  beforeEach(async function () {

    Token = await ethers.getContractFactory("EIP20");
    [owner, addr1, addr2, ...addrs] = await ethers.getSigners();

    hardhatToken = await Token.deploy();
  });

  describe("Deployment", function () {
    it("Should assign the total supply of tokens to the owner", async function () {
      await hardhatToken.mint(owner.address, initSupply);
      const ownerBalance = await hardhatToken.balanceOf(owner.address);
      expect(ownerBalance).to.equal(initSupply);
      expect(await hardhatToken.totalSupply()).to.equal(ownerBalance);
    });
  });

  describe("Transactions", function () {

    describe("Pure Transfers", function () {
      it("Should transfer tokens between accounts", async function () {

        await hardhatToken.mint(owner.address, initSupply);

        // Transfer 50 tokens from owner to addr1
        await hardhatToken.transfer(addr1.address, 50);
        const addr1Balance = await hardhatToken.balanceOf(addr1.address);
        expect(addr1Balance).to.equal(50);

        // Transfer 25 tokens from addr1 to addr2
        // We use .connect(signer) to send a transaction from another account
        await hardhatToken.connect(addr1).transfer(addr2.address, 25);
        const addr2Balance = await hardhatToken.balanceOf(addr2.address);
        expect(addr2Balance).to.equal(25);
      });

      it("Should fail if sender doesnâ€™t have enough tokens", async function () {
        await hardhatToken.mint(owner.address, initSupply);
        const initialOwnerBalance = await hardhatToken.balanceOf(owner.address);

        // Try to send 1 token from addr1 (0 tokens) to owner (1000000 tokens).
        // `require` will evaluate false and revert the transaction.
        await expect(hardhatToken.connect(addr1).transfer(owner.address, 1)).to.be.revertedWith("Not enough balance!");

        // Owner balance shouldn't have changed.
        expect(await hardhatToken.balanceOf(owner.address)).to.equal(initialOwnerBalance);
      });

      it("Should update balances after transfers", async function () {
        await hardhatToken.mint(owner.address, initSupply);
        const initialOwnerBalance = await hardhatToken.balanceOf(owner.address);

        // Transfer 100 tokens from owner to addr1.
        await hardhatToken.transfer(addr1.address, 100);

        // Transfer another 50 tokens from owner to addr2.
        await hardhatToken.transfer(addr2.address, 50);

        // Check balances.
        const finalOwnerBalance = await hardhatToken.balanceOf(owner.address);
        expect(finalOwnerBalance).to.equal(initialOwnerBalance - 150);

        const addr1Balance = await hardhatToken.balanceOf(addr1.address);
        expect(addr1Balance).to.equal(100);

        const addr2Balance = await hardhatToken.balanceOf(addr2.address);
        expect(addr2Balance).to.equal(50);
      });
    });

    describe("Allowance Transfers", function () {
      
      it("Should Approve 200 tokens from acc 1 (owner) to acc 2 (addr1)", async function () {

        await hardhatToken.mint(owner.address, initSupply);

        await hardhatToken.approve(addr1.address, 200);
        expect(await hardhatToken.balanceOf(owner.address)).to.equal(initSupply);

        const addr1Balance = await hardhatToken.balanceOf(addr1.address);
        expect(addr1Balance).to.equal(0);

        const addr1All = await hardhatToken.allowance(owner.address, addr1.address);
        expect(addr1All).to.equal(200);
      });

      it("Should Approve 200 tokens and transfer them to a 3rd account", async function () {

        await hardhatToken.mint(owner.address, initSupply);

        // Approve a lot more than the current owner's balance (10k)
        await hardhatToken.approve(addr1.address, 2000000);
        expect(await hardhatToken.allowance(owner.address, addr1.address)).to.equal(2000000);
        // Try to use 133k of owner's tokens, when owner only has 10k actual tokens -> should revert
        await expect(hardhatToken.connect(addr1).transferFrom(owner.address, addr2.address, 133000)).to.be.revertedWith("Not enough balance!");

        // Restore approval of 200 tokens
        await hardhatToken.approve(addr1.address, 200);
        expect(await hardhatToken.allowance(owner.address, addr1.address)).to.equal(200);

        // Unauthorized addr2 tries to get allowance from owner -> should revert
        await expect(hardhatToken.connect(addr2).transferFrom(owner.address, addr1.address, 10)).to.be.revertedWith("Not enough allowance!");

        await hardhatToken.connect(addr1).transferFrom(owner.address, addr2.address, 150);

        expect(await hardhatToken.balanceOf(owner.address)).to.equal(initSupply - 150);

        const addr1Balance = await hardhatToken.balanceOf(addr1.address);
        expect(addr1Balance).to.equal(0);

        const addr2Balance = await hardhatToken.balanceOf(addr2.address);
        expect(addr2Balance).to.equal(150);

        const addr1All = await hardhatToken.allowance(owner.address, addr1.address);
        expect(addr1All).to.equal(50);
      });

    });
      
  });
});